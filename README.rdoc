= SPACE 10

This is the platform powering SPACE 10.

Planned release November 1.

Features

* Versioned API
* Admin area
* Modular content block system for posts

== API

=== Schema

All API access is over HTTPS, and accessed from the +space10-staging.herokuapp.com/api+ endpoint. All data is sent and received as JSON.

The +Accept+ header allows you to specify a version - currently only +v1+:

  'Accept: application/vnd.space10.v1'

All timestamps are returned in ISO 8601 format:

  YYYY-MM-DDTHH:MM:SSZ


=== Authentication

There are two types of endpoints. One for non-authenticated users and one where user authentication is required.

==== User-authentication not required

Endpoints where user authentication is not required are protected with HTTP Basic Authentication.

Example:

  $ curl -I -u USERNAME:PASSWORD https://space10-staging.herokuapp.com/api/events

  HTTP/1.1 200 OK 
  Connection: keep-alive
  X-Frame-Options: SAMEORIGIN
  X-Xss-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Type: application/json; charset=utf-8
  Etag: W/"2d04a163150cc38bebc5da01c04f4b94"
  Cache-Control: max-age=0, private, must-revalidate
  X-Request-Id: 66cccc5e-ee84-4fd0-94b4-c0be60b1ebc2
  X-Runtime: 0.024655
  Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
  Date: Mon, 26 Oct 2015 14:01:01 GMT
  Content-Length: 0
  Set-Cookie: request_method=HEAD; path=/
  Via: 1.1 vegur

Endpoints that are protected with HTTP Basic Authentication:

  # Create user
  post '/api/users'

  # Authenticate / get auth_token
  post '/api/authenticate'

  # Events
  get '/api/events'
  get '/api/events/:id'

  # Posts
  get '/api/posts'
  get '/api/posts/:id'

  # Profiles
  get '/api/profiles'
  get '/api/profiles/:id'

==== User-authentication required

Endpoints where user authentication is not required are protected with HTTP Token Authentication.

Example:

  $ curl -I -H 'Authorization: Token token=AUTH_TOKEN' https://space10-staging.herokuapp.com/api/user

  HTTP/1.1 200 OK 
  Connection: keep-alive
  X-Frame-Options: SAMEORIGIN
  X-Xss-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Type: application/json; charset=utf-8
  Etag: W/"e4ac09dc90384d4b0c0e25ae7fc6ee13"
  Cache-Control: max-age=0, private, must-revalidate
  X-Request-Id: fc0cee52-542e-4377-b6ae-789608a995c3
  X-Runtime: 0.013128
  Server: WEBrick/1.3.1 (Ruby/2.0.0/2015-04-13)
  Date: Mon, 26 Oct 2015 14:03:38 GMT
  Content-Length: 0
  Set-Cookie: request_method=HEAD; path=/
  Via: 1.1 vegur

Endpoints that are protected with HTTP Token Authentication:

  # Authenticated user
  get '/api/user'
  put '/api/user'
  
  # Registrations
  get '/api/user/registrations'
  post '/api/user/registrations'
  get '/api/user/registrations/:id'
  delete '/api/user/registrations/:id'

=== Pagination

Requests that return multiple items will be paginated to 5 items by default. You can specify further pages with the page parameter. You can also set a custom page size up to 100 with the per_page parameter.

  $ curl -u USERNAME:PASSWORD https://space10-staging.herokuapp.com/api/events?page=2&per_page=100

=== API index

- {Users}[https://github.com/danielfriis/space10#users]
- {Events}[https://github.com/danielfriis/space10#events]
- {Event registrations}[https://github.com/danielfriis/space10#event-registrations]
- {Posts}[https://github.com/danielfriis/space10#posts]
- {Profiles}[https://github.com/danielfriis/space10#profiles]
- {Labs}[https://github.com/danielfriis/space10#labs]
- {Beacons}[https://github.com/danielfriis/space10#beacons]


=== Users

==== Create user

  post /api/users
  Authorization: Basic USERNAME:PASSWORD

*Parameters*

  {
    "user" => {
      "name" => "John",
      "email" => "johndoe@example.com",
      "password" => "foobar123"
    }
  }

*Response*

  {
      'id' => user.id,
      'auth_token' => user.auth_token,
      'name' => "John",
      'email' => "johndoe@example.com",
      'birthday' => user.birthday.try(:strftime,"%F"),
      'gender' => user.gender,
      'personal_profile' => {
        'id' => user.personal_profile.id,
        'type' => user.personal_profile.type,
        'title' => "John",
        'tagline' => user.personal_profile.tagline,
        'description' => nil,
        'location' => nil,
        'tags' => [],
        'avatar' => {
          'small' => user.personal_profile.image_url(:thumbnail),
          'medium' => user.personal_profile.image_url(:medium),
          'large' => user.personal_profile.image_url(:large)
          },
        'logo' => nil
        },
      'company_profiles' => []
    }

==== Authenticate user

  post /api/authenticate
  Authorization: Basic USERNAME:PASSWORD

*Parameters*

  {
    "email" => user.email,
    "password" => password
  }

*Response*

  {
    'id' => user.id,
    'auth_token' => user.auth_token,
    'name' => user.name,
    'email' => user.email,
    'birthday' => user.birthday.try(:strftime,"%F"),
    'gender' => user.gender,
    'personal_profile' => {
      'id' => user.personal_profile.id,
      'type' => user.personal_profile.type,
      'title' => user.name,
      'tagline' => user.personal_profile.tagline,
      'description' => nil,
      'location' => nil,
      'tags' => [],
      'avatar' => {
        'small' => user.personal_profile.image_url(:thumbnail),
        'medium' => user.personal_profile.image_url(:medium),
        'large' => user.personal_profile.image_url(:large)
        },
      'logo' => nil
      },
    'company_profiles' => []
  }

==== Get authenticated user

  get /api/user
  Authorization: Token token=AUTH_TOKEN

*Response*

  {
    'id' => user.id,
    'auth_token' => user.auth_token,
    'name' => user.name,
    'email' => user.email,
    'birthday' => user.birthday.try(:strftime,"%F"),
    'gender' => user.gender,
    'personal_profile' => {
      'id' => user.personal_profile.id,
      'type' => user.personal_profile.type,
      'title' => user.name,
      'tagline' => user.personal_profile.tagline,
      'description' => nil,
      'location' => nil,
      'tags' => [],
      'avatar' => {
        'small' => user.personal_profile.image_url(:thumbnail),
        'medium' => user.personal_profile.image_url(:medium),
        'large' => user.personal_profile.image_url(:large)
        },
      'logo' => nil
      },
    'company_profiles' => []
  }

==== Update user

  put /api/user
  Authorization: Token token=AUTH_TOKEN

*Parameters*

  "user" => {
    "name" => "Frank"
  }

*Response*

  {
    'id' => user.id,
    'auth_token' => user.auth_token,
    'name' => user.name,
    'email' => user.email,
    'birthday' => user.birthday.try(:strftime,"%F"),
    'gender' => user.gender,
    'personal_profile' => {
      'id' => user.personal_profile.id,
      'type' => user.personal_profile.type,
      'title' => user.name,
      'tagline' => user.personal_profile.tagline,
      'description' => nil,
      'location' => nil,
      'tags' => [],
      'avatar' => {
        'small' => user.personal_profile.image_url(:thumbnail),
        'medium' => user.personal_profile.image_url(:medium),
        'large' => user.personal_profile.image_url(:large)
        },
      'logo' => nil
      },
    'company_profiles' => []
  }

=== Events

==== Get all events

  get /api/events
  Authorization: Basic USERNAME:PASSWORD

Note: You may also get just the future or historic events, by doing following call.

  get /api/future_events
  Authorization: Basic USERNAME:PASSWORD

or

  get /api/historic_events
  Authorization: Basic USERNAME:PASSWORD

*Response*

  [
    {
      'id' => 1,
      'title' => event.title,
      'excerpt' => event.excerpt,
      'content' => event.content,
      'featured_image' => {
          'small' => event.featured_image_url(:small),
          'medium' => event.featured_image_url(:medium),
          'large' => event.featured_image_url(:large)
        },
      'secondary_image' => {
          'small' => event.secondary_image_url(:small),
          'medium' => event.secondary_image_url(:medium),
          'large' => event.secondary_image_url(:large)
        },
      'starts_at' => event.starts_at.in_time_zone('Copenhagen').iso8601,
      'ends_at' => event.ends_at.in_time_zone('Copenhagen').iso8601,
      'published_at' => event.published_at.in_time_zone('Copenhagen').iso8601,
      'project_partners' => {
        'text' => nil,
        'partners' => [],
      },
      'project_people' => {
        'text' => nil,
        'people' => [],
      },
      'lab' => nil
    },
    {
      'id' => 2,
      'title' => event.title,
      'excerpt' => event.excerpt,
      'content' => event.content,
      'featured_image' => {
          'small' => event.featured_image_url(:small),
          'medium' => event.featured_image_url(:medium),
          'large' => event.featured_image_url(:large)
        },
      'secondary_image' => {
          'small' => event.secondary_image_url(:small),
          'medium' => event.secondary_image_url(:medium),
          'large' => event.secondary_image_url(:large)
        },
      'starts_at' => event.starts_at.in_time_zone('Copenhagen').iso8601,
      'ends_at' => event.ends_at.in_time_zone('Copenhagen').iso8601,
      'published_at' => event.published_at.in_time_zone('Copenhagen').iso8601,
      'project_partners' => {
        'text' => nil,
        'partners' => [],
      },
      'project_people' => {
        'text' => nil,
        'people' => [],
      },
      'lab' => nil
    }
  ]

==== Get specific event

  get /api/events/:id
  Authorization: Basic USERNAME:PASSWORD

*Response*

  {
    'id' => event.id,
    'title' => event.title,
    'excerpt' => event.excerpt,
    'content' => event.content,
    'featured_image' => {
        'small' => event.featured_image_url(:small),
        'medium' => event.featured_image_url(:medium),
        'large' => event.featured_image_url(:large)
      },
    'secondary_image' => {
        'small' => event.secondary_image_url(:small),
        'medium' => event.secondary_image_url(:medium),
        'large' => event.secondary_image_url(:large)
      },
    'starts_at' => event.starts_at.in_time_zone('Copenhagen').iso8601,
    'ends_at' => event.ends_at.in_time_zone('Copenhagen').iso8601,
    'published_at' => event.published_at.in_time_zone('Copenhagen').iso8601,
    'project_partners' => {
      'text' => nil,
      'partners' => [],
    },
    'project_people' => {
      'text' => nil,
      'people' => [],
    },
    'lab' => nil
  }

==== Get authenticated user's events

  get /api/user/registrations
  Authorization: Token token=AUTH_TOKEN

*Response*

  [
    {
      'id' => 1,
      'confirmation_status' => 'unconfirmed',
      'event' => {
          'id' => 1,
          'title' => event.title,
          'excerpt' => event.excerpt,
          'content' => event.content,
          'starts_at' => event.starts_at,
          'ends_at' => event.ends_at,
          'published_at' => event.published_at
        },
    },
    {
      'id' => 2,
      'confirmation_status' => 'unconfirmed',
      'event' => {
          'id' => 2,
          'title' => event.title,
          'excerpt' => event.excerpt,
          'content' => event.content,
          'starts_at' => event.starts_at,
          'ends_at' => event.ends_at,
          'published_at' => event.published_at
        },
    }
  ]

==== Get specific registration of authenticated user

  get /api/user/registrations/:id
  Authorization: Token token=AUTH_TOKEN

  {
    'id' => registration.id,
    'confirmation_status' => 'unconfirmed',
    'event' => {
        'id' => event.id,
        'title' => event.title,
        'excerpt' => event.excerpt,
        'content' => event.content,
        'starts_at' => event.starts_at,
        'ends_at' => event.ends_at,
        'published_at' => event.published_at
      },
  }

==== Request seat at event

  post /api/user/registrations
  Authorization: Token token=AUTH_TOKEN

*Paramters*

  "registration" => {
    "user_id" => user.id,
    "event_id" => event.id
  }

*Response*

  {
    'id' => registration.id,
    'confirmation_status' => 'unconfirmed',
    'event' => {
        'id' => event.id,
        'title' => event.title,
        'excerpt' => event.excerpt,
        'content' => event.content,
        'starts_at' => event.starts_at,
        'ends_at' => event.ends_at,
        'published_at' => event.published_at
      },
  }

==== Remove registration

  delete /api/user/registrations/:id
  Authorization: Token token=AUTH_TOKEN

*Response*

  Status: 200 OK


=== Posts

==== Get all posts

  get /api/posts
  Authorization: Basic USERNAME:PASSWORD

*Response*

  [
    {
      'id' => post.id,
      'excerpt' => post.excerpt,
      'title' => post.title,
      'featured_image'  => {
          'small' => post.featured_image_url(:small),
          'medium' => post.featured_image_url(:medium),
          'large' => post.featured_image_url(:large)
        },
      'tags' => [],
      'content' => post.content,
      'published_at' => post.published_at.in_time_zone('Copenhagen').iso8601,
      'project_partners' => {
        'text' => nil,
        'partners' => [],
      },
      'project_people' => {
        'text' => nil,
        'people' => [],
      },
      'lab' => nil
    },
    {
      'id' => post.id,
      'excerpt' => post.excerpt,
      'title' => post.title,
      'featured_image'  => {
          'small' => post.featured_image_url(:small),
          'medium' => post.featured_image_url(:medium),
          'large' => post.featured_image_url(:large)
        },
      'tags' => [],
      'content' => post.content,
      'published_at' => post.published_at.in_time_zone('Copenhagen').iso8601,
      'project_partners' => {
        'text' => nil,
        'partners' => [],
      },
      'project_people' => {
        'text' => nil,
        'people' => [],
      },
      'lab' => nil
    }
  ]

==== Get specific post

  get /api/posts/:id
  Authorization: Basic USERNAME:PASSWORD

*Response*

  {
    'id' => post.id,
    'excerpt' => post.excerpt,
    'title' => post.title,
    'featured_image'  => {
        'small' => post.featured_image_url(:small),
        'medium' => post.featured_image_url(:medium),
        'large' => post.featured_image_url(:large)
      },
    'tags' => [],
    'content' => post.content,
    'published_at' => post.published_at.in_time_zone('Copenhagen').iso8601,
    'project_partners' => {
      'text' => nil,
      'partners' => [],
    },
    'project_people' => {
      'text' => nil,
      'people' => [],
    },
    'lab' => nil
  }

=== Profiles

==== Get all profiles

  get /api/profiles
  Authorization: Basic USERNAME:PASSWORD

*Parameters*

  category: string
  location: string

See filter options below.

*Response*

  [
    {
      'id' => profile.id,
      'type' => profile.type,
      'title' => profile.title,
      'tagline' => profile.tagline,
      'description' => profile.description,
      'location' => profile.location,
      'tags' => [],
      'avatar' => {
        'small' => profile.image_url(:thumbnail),
        'medium' => profile.image_url(:medium),
        'large' => profile.image_url(:large)
        },
      'logo' => nil
    },
    {
      'id' => profile.id,
      'type' => profile.type,
      'title' => profile.title,
      'tagline' => profile.tagline,
      'description' => profile.description,
      'location' => profile.location,
      'tags' => [],
      'avatar' => {
        'small' => profile.image_url(:thumbnail),
        'medium' => profile.image_url(:medium),
        'large' => profile.image_url(:large)
        },
      'logo' => nil
    }
  ]

==== Get specific profile

  get /api/profiles/:id
  Authorization: Basic USERNAME:PASSWORD

*Response*

  {
    'id' => profile.id,
    'type' => profile.type,
    'title' => profile.title,
    'tagline' => profile.tagline,
    'description' => profile.description,
    'location' => profile.location,
    'tags' => [],
    'avatar' => {
      'small' => profile.image_url(:thumbnail),
      'medium' => profile.image_url(:medium),
      'large' => profile.image_url(:large)
      },
    'logo' => nil
  }

==== Get filter options

  get /api/profiles/filter_options
  Authorization: Basic USERNAME:PASSWORD

*Response*

  {
    'categories' => ['Tag one', 'Tag two'],
    'locations' => ['Copenhagen, Denmark']
  }  

=== Labs

==== Get all labs

  get /api/labs
  Authorization: Basic USERNAME:PASSWORD

*Response*

  [
    {
      'id' => lab.id,
      'title' => lab.title,
      'subtitle' => lab.subtitle,
      'starts_at' => lab.starts_at.in_time_zone('Copenhagen').iso8601,
      'ends_at' => lab.ends_at.in_time_zone('Copenhagen').iso8601,
      'events' => [],
      'posts' => []
    },
    {
      'id' => lab.id,
      'title' => lab.title,
      'subtitle' => lab.subtitle,
      'starts_at' => lab.starts_at.in_time_zone('Copenhagen').iso8601,
      'ends_at' => lab.ends_at.in_time_zone('Copenhagen').iso8601,
      'events' => [],
      'posts' => []
    }
  ]

==== Get specific lab

  get /api/labs/:id
  Authorization: Basic USERNAME:PASSWORD

*Response*

  {
    'id' => lab.id,
    'title' => lab.title,
    'subtitle' => lab.subtitle,
    'starts_at' => lab.starts_at.in_time_zone('Copenhagen').iso8601,
    'ends_at' => lab.ends_at.in_time_zone('Copenhagen').iso8601,
    'events' => [],
    'posts' => []
  }

=== Beacons

